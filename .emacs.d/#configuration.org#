#+TITLE: Emacs configuration
#+BEGIN_SRC emacs-lisp
(setq bidi-paragraph-direction 'left-to-right)
(require 'ereader)
#+END_SRC

* Set personal information
I Got the idea from [[https://github.com/hrs/dotfiles][Harry R. Schwartzs config file]] 
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Ali Mehmandoost"
        user-mail-address "ali.mehmandoost@gmail.com"
        calendar-latitude 32.65
        calendar-longitude 51.67
        calendar-location-name "Isfahan")
#+END_SRC


* repository list
I use =[[https://melpa.org][MELPA]]=.
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/"))
(package-initialize)
#+END_SRC



* UI preferences
** Disable window chrome

I don't usually use the menu or scroll bar, and they take up useful space.

#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  ;(when window-system
  ;  (scroll-bar-mode -1))
#+END_SRC
** my Transparency function
#+BEGIN_SRC emacs-lisp
 (defun transparency (value)
   "Sets the transparency of the frame window. 0=transparent/100=opaque"
   (interactive "nTransparency Value 0 - 100 opaque:")
   (set-frame-parameter (selected-frame) 'alpha value))

#+END_SRC 

** Custom solarized-dark theme
#+BEGIN_SRC emacs-lisp
(when window-system
 (setq solarized-use-variable-pitch nil)
 (setq solarized-height-plus-1 1.0)
 (setq solarized-height-plus-2 1.0)
 (setq solarized-height-plus-3 1.0)
 (setq solarized-height-plus-4 1.0)
 (setq solarized-high-contrast-mode-line t)
 (load-theme 'solarized-dark t)
 (transparency 90)
)

(defun load-my-theme (frame)
  (select-frame frame)
    (setq solarized-use-variable-pitch nil)
    (setq solarized-height-plus-1 1.0)
    (setq solarized-height-plus-2 1.0)
    (setq solarized-height-plus-3 1.0)
    (setq solarized-height-plus-4 1.0)
    (setq solarized-high-contrast-mode-line t)
    (load-theme 'solarized-dark t)
    (transparency 90)
)
#+END_SRC

** deamon
#+BEGIN_SRC emacs-lisp
 (if (daemonp)
    (add-hook 'after-make-frame-functions #'load-my-theme)
    (load-my-theme t)
)
#+END_SRC

** Use fancy lambdas
Why not?

#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
#+END_SRC

** ido
#+BEGIN_SRC emacs-lisp
(require 'ido)
(ido-mode 1)
#+END_SRC
** Highlight the current line

=global-hl-line-mode= softly highlights the background color of the line
containing point. It makes it a bit easier to find point, and it's useful when
pairing or presenting code.

#+BEGIN_SRC emacs-lisp
  (when window-system
    (global-hl-line-mode))
#+END_SRC
** line number
#+BEGIN_SRC emacs-lisp
(global-linum-mode t)
#+END_SRC


* emacs Client
#+BEGIN_SRC emacs-lisp
(defun client-save-kill-emacs(&optional display)
  " This is a function that can bu used to shutdown save buffers and 
shutdown the emacs daemon. It should be called using 
emacsclient -e '(client-save-kill-emacs)'.  This function will
check to see if there are any modified buffers or active clients
or frame.  If so an x window will be opened and the user will
be prompted."

  (let (new-frame modified-buffers active-clients-or-frames)

    ; Check if there are modified buffers or active clients or frames.
    (setq modified-buffers (modified-buffers-exist))
    (setq active-clients-or-frames ( or (> (length server-clients) 1)
					(> (length (frame-list)) 1)
				       ))  

    ; Create a new frame if prompts are needed.
    (when (or modified-buffers active-clients-or-frames)
      (when (not (eq window-system 'x))
	(message "Initializing x windows system.")
	(x-initialize-window-system))
      (when (not display) (setq display (getenv "DISPLAY")))
      (message "Opening frame on display: %s" display)
      (select-frame (make-frame-on-display display '((window-system . x)))))

    ; Save the current frame.  
    (setq new-frame (selected-frame))


    ; When displaying the number of clients and frames: 
    ; subtract 1 from the clients for this client.
    ; subtract 2 from the frames this frame (that we just created) and the default frame.
    (when ( or (not active-clients-or-frames)
	       (yes-or-no-p (format "There are currently %d clients and %d frames. Exit anyway?" (- (length server-clients) 1) (- (length (frame-list)) 2)))) 
      
      ; If the user quits during the save dialog then don't exit emacs.
      ; Still close the terminal though.
      (let((inhibit-quit t))
             ; Save buffers
	(with-local-quit
	  (save-some-buffers)) 
	      
	(if quit-flag
	  (setq quit-flag nil)  
          ; Kill all remaining clients
	  (progn
	    (dolist (client server-clients)
	      (server-delete-client client))
		 ; Exit emacs
	    (kill-emacs))) 
	))

    ; If we made a frame then kill it.
    (when (or modified-buffers active-clients-or-frames) (delete-frame new-frame))
    )
  )


(defun modified-buffers-exist() 
  "This function will check to see if there are any buffers
that have been modified.  It will return true if there are
and nil otherwise. Buffers that have buffer-offer-save set to
nil are ignored."
  (let (modified-found)
    (dolist (buffer (buffer-list))
      (when (and (buffer-live-p buffer)
		 (buffer-modified-p buffer)
		 (not (buffer-base-buffer buffer))
		 (or
		  (buffer-file-name buffer)
		  (progn
		    (set-buffer buffer)
		    (and buffer-offer-save (> (buffer-size) 0))))
		 )
	(setq modified-found t)
	)
      )
    modified-found
    )
  )
#+END_SRC


* Adding Helm

#+BEGIN_SRC emacs-lisp

(require 'helm)
(require 'helm-config)

;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-unset-key (kbd "C-x c"))

(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
(define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB work in terminal
(define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

(when (executable-find "curl")
  (setq helm-google-suggest-use-curl-p t))

(setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
      helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
      helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
      helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
      helm-ff-file-name-history-use-recentf t
      helm-echo-input-in-header-line t)

(defun spacemacs//helm-hide-minibuffer-maybe ()
  "Hide minibuffer in Helm session if we use the header line as input field."
  (when (with-helm-buffer helm-echo-input-in-header-line)
    (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
      (overlay-put ov 'window (selected-window))
      (overlay-put ov 'face
                   (let ((bg-color (face-background 'default nil)))
                     `(:background ,bg-color :foreground ,bg-color)))
      (setq-local cursor-type nil))))


(add-hook 'helm-minibuffer-set-up-hook
          'spacemacs//helm-hide-minibuffer-maybe)

(setq helm-autoresize-max-height 0)
(setq helm-autoresize-min-height 20)
(helm-autoresize-mode 1)

(helm-mode 1)
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
(global-set-key (kbd "C-x C-f") #'helm-find-files)
#+END_SRC

#+BEGIN_SRC emacs-lisp

;; Set transparency of emacs

#+END_SRC

  

* CPP IDE
** Source code navigation
*** gtags
Install [[https://github.com/leoliu/ggtags][ggtags]] from MELPA. and global(gtags) and ctags for your os.
this is a setup code =ggtags= and key bindings for source code navigations:

#+BEGIN_SRC emacs-lisp
;;(require 'init-gtags)
;;(require 'ggtags)
;;(add-hook 'c-mode-common-hook
;;          (lambda ()
;;            (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
;;              (ggtags-mode 1))))
#+END_SRC

*** helm-gtags
#+BEGIN_SRC emacs-lisp
(require 'helm-gtags)
(setq
 helm-gtags-ignore-case t
 helm-gtags-auto-update t
 helm-gtags-use-input-at-cursor t
 helm-gtags-pulse-at-cursor t
 helm-gtags-prefix-key "\C-cg"
 helm-gtags-suggested-key-mapping t
 )

;; (require 'helm-gtags)
;; Enable helm-gtags-mode
(add-hook 'dired-mode-hook 'helm-gtags-mode)
(add-hook 'eshell-mode-hook 'helm-gtags-mode)
(add-hook 'c-mode-hook 'helm-gtags-mode)
(add-hook 'c++-mode-hook 'helm-gtags-mode)
(add-hook 'asm-mode-hook 'helm-gtags-mode)

(define-key helm-gtags-mode-map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
(define-key helm-gtags-mode-map (kbd "C-j") 'helm-gtags-select)
(define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
(define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)
(define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
(define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history)
#+END_SRC

**** Basic movements
- *C-M-f* runs =forward-sexp=, move forward over a balanced
  expression that can be a pair or a symbol.

- *C-M-b* runs =backward-sexp=, move backward over a balanced
  expression that can be a pair or a symbol.

- *C-M-k* runs =kill-sexp=, kill balanced expression
  forward that can be a pair or a symbol.

- *C-M-<SPC>* or *C-M-@* runs =mark-sexp=, put mark after
  following expression that can be a pair or a symbol.

- *C-M-a* runs =beginning-of-defun=, which moves point to beginning of
  a function.

- *C-M-e* runs =end-of-defun=, which moves point to end of a
  function.

- *C-M-h* runs =mark-defun=, which put a region around whole current
  or following function.

- you jump back to original location by using M-,=, which runs =tags-loop-continue (Emacs default).

- If you want to list all the functions that the current function - the function that point is inside - calls, you can do that with helm-gtags-tags-in-this-function, which is bound to C-c g a in my setup.

- helm-gtags also has the command helm-gtags-show-stack that shows visited tags from newest to oldest, from top to bottom.

** sr-space bar (the tree)
- To open =sr-speedbar=, execute the command =sr-speedbar-open= or
  =sr-speedbar-toggle=.

- To close =sr-speedbar=, execute the command =sr-speedbar-close= or
  =sr-speedbar-toggle= again.

Best is to use =sr-speedbar-toggle= only, for simplicity.

=sr-speedbar= gives the following improvements:

- Automatically switches directory tree - when you switch buffer - to
  the =default-directory= of current buffer.
- Use an Emacs window instead of frame, make it easier to use.
- *C-x 1* deletes every window except Speedbar, so you won't have to
  open again.
- You can prevent *C-x o* to jump to =sr-speedbar= window by setting
  =sr-speedbar-skip-other-window-p= to `t`. You can still move to

** Intellisense
*** Company
**** General Usage
 Completion will start automatically after you type a
few letters. Use *M-n* and *M-p* to select, *<return>* to complete or
*<tab>* to complete the common part. Search through the completions
with *C-s*, *C-r* and *C-o*. Press *M-(digit)* to quickly complete
with one of the first 10 candidates. When the completion candidates
are shown, press *<f1>* to display the documentation for the selected
candidate, or *C-w* to see its source. Not all back-ends support
this.

#+BEGIN_SRC emacs-lisp
(require 'company)
(add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

**** Source code completion using Clang
To use =company-mode= with Clang, add this configuration:
#+BEGIN_SRC emacs-lisp
(require 'cc-mode)
(setq company-backends (delete 'company-semantic company-backends))
(define-key c-mode-map  [(tab)] 'company-complete)
(define-key c++-mode-map  [(tab)] 'company-complete)
#+END_SRC
You have two commands for completing C/C++ code:

- =company-clang=: use =clang= to retrieve completion candidates. You
  will have completion with system header files, but not your
  project. By default, =company-complete= already includes
  =company-clang= backend, so you can use =company-complete= to
  complete for many thing. Note that in the configuration for
  =company-mode= above, we have to delete =company-semantic=,
  otherwise =company-complete= will use =company-semantic= instead of
  =company-clang=, because it has higher precedence in
  =company-backends=. =company-semantic= will be discuss in the CEDET
  section.

  To retrieve completion candidates for your projects, you will have
  to tell Clang where your include paths are. Create a file named
  =.dir-locals.el= at your project root:

    ((nil . ((company-clang-arguments . ("-I/home/<user>/project_root/include1/"
                                         "-I/home/<user>/project_root/include2/")))))
  
If you put a file with a special name .dir-locals.el in a directory,
Emacs will read it when it visits any file in that directory or any of
its subdirectories, and apply the settings it specifies to the file’s
buffer. If you want to know more, read [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html][GNU Emacs Manual -
Per-Directory Local Variables]]. If you use Helm, you can easily insert
absolute path by *C-c i* at the current path in =helm-find-files=


**** Header file completion with company-c-headers package
#+BEGIN_SRC emacs-lisp
(add-to-list 'company-backends 'company-c-headers)
#+END_SRC

*_IMPORTANT_*: If you want to complete C++ header files, you have to
add its paths since by default =company-c-headers= only includes these
two system include paths: =/usr/include/= and
=/usr/local/include/=. To enable C++ header completion for standard
libraries, you have to add its path, for example, like this: 

#+begin_src emacs-lisp
  ;;(add-to-list 'company-c-headers-path-system "/usr/include/c++/4.8/")
#+end_src

After that, you can complete C++ header files. To complete project
local, use =company-c-headers-path-user= and put it in
=.dir-locals.el=.

*** CEDET
**** Semantic
=Semantic= is a package that provides language-aware editing commands
based on source code parsers. Parsing is a process of analyzing source
code based on programming language syntax. Emacs understands your
source code through this process to provides features such as
contextual code completion, code navigation

#+BEGIN_SRC emacs-lisp
  (require 'cc-mode)
  (require 'semantic)

  (global-semanticdb-minor-mode 1)

  (global-semantic-idle-scheduler-mode 1)
  (semantic-mode 1)
#+END_SRC
***** Add more system include paths

By default, Semantic automatically includes some default system
include paths such as =/usr/include=, =/usr/local/include=... You can
view the list of include paths in
=semantic-dependency-system-include-path=. To add more include paths,
for example Boost include paths, use the function
=semantic-add-system-include= like this:
#+BEGIN_SRC emacs-lisp
(semantic-add-system-include "/usr/local/include")
  (semantic-add-system-include "/usr/include/boost" 'c++-mode)
  (semantic-add-system-include "/usr/include/linux/")
  (semantic-add-system-include "/lib/modules/4.7.6-1-ARCH/build")

(setq
 c-default-style "linux" ;; set style to "linux"
 )
#+END_SRC


If you want the system include paths to be available on both C/C++
modes, then ignore the optional mode argument in
=semantic-add-system-include=.


* Publishing and task management with Org-mode

** Display preferences

I like to see an outline of pretty bullets instead of a list of asterisks.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (org-bullets-mode t)))
#+END_SRC

I like seeing a little downward-pointing arrow instead of the usual ellipsis
(=...=) that org displays when there's stuff under a header.

#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "⤵")
#+END_SRC

Use syntax highlighting in source blocks while editing.

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

Make TAB act as if it were issued in a buffer of the language's major mode.

#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC

[Offline] When editing a code snippet, use the current window rather than popping open a
new one (which shows the same information).

#+BEGIN_SRC emacs-lisp
  ;(setq org-src-window-setup 'current-window)
#+END_SRC





* Farsi-key
** key-bindings:
*** Cut
#+BEGIN_SRC emacs-lisp
;; (global-set-key (kbd "C-غ") 'clipboard-yank)
#+END_SRC
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-ص") 'clipboard-kill-region)
#+END_SRC

*** Copy
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-ص") 'clipboard-kill-ring-save)
#+END_SRC

*** Paste
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-غ") 'clipboard-yank)
#+END_SRC

*** Save
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-ط C-س") 'save-buffer)
(global-set-key (kbd "C-ط س") 'save-some-buffers)
#+END_SRC
*** Start Helm-M
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-ط") 'helm-M-x)
#+END_SRC
*** Helm-Find-Files
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-ط C-ب") #'helm-find-files)
#+END_SRC
*** Begginig-of-line
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-ش") 'move-beginning-of-line)
#+END_SRC
*** End-of-line
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-ث") 'move-end-of-line)
#+END_SRC
*** Other Window
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-ط خ") 'other-window)
#+END_SRC
